"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import logging
import logging.config
import sentry_sdk
from sentry_sdk.integrations.logging import LoggingIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# get environment (dev/prod) set in runtime
ENVIRONMENT = os.environ.get('ENVIRONMENT')

# Load env settings from /envs/base (common) and /envs/override (env-specific for dev, prod, etc)
ENV_DIR = BASE_DIR / 'config' / 'envs'
load_dotenv(ENV_DIR / '.env.base')
load_dotenv(ENV_DIR / '.env.override', override=True)

# get environment from file
if not ENVIRONMENT:
    ENVIRONMENT = os.environ['ENVIRONMENT'].lower()

# used for django.setup
DJANGO_SETTINGS_MODULE = 'config.settings'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xt_$(^cw9bl%qrk85s$9w4_&f*wrra5(*h!l#y+mcl9p+yls%6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT == 'dev'

ALLOWED_HOSTS = [
    '52.14.243.148',
    'kyrt.ai',
    'localhost'
]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.web.apps.WebConfig',
    'django_celery_beat',       # scheduling
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

INTERNAL_IPS = [
    "127.0.0.1",
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'postgres_dev': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ['POSTGRES_HOST'],
        'PORT': os.environ['POSTGRES_PORT'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'NAME': os.environ['POSTGRES_DEV_DB_NAME']
    },
    'postgres_prod': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ['POSTGRES_HOST'],
        'PORT': os.environ['POSTGRES_PORT'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'NAME': os.environ['POSTGRES_PROD_DB_NAME']
    },
}
DATABASES['default'] = DATABASES[f'postgres_{ENVIRONMENT}']


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Celery settings
REDIS_URL = os.environ['REDIS_URL']
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_TIMEZONE = TIME_ZONE
CELERY_INCLUDE = ['scraping_service.tasks']
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True


AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
AWS_S3_BUCKET_NAME = os.environ['AWS_S3_BUCKET_NAME']


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'config' / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_DIR = BASE_DIR / '_etc' / 'logs'
LOG_DIR.mkdir(exist_ok=True)
DEBUG_TO_CONSOLE = os.environ['DEBUG_TO_CONSOLE'].lower().strip() == 'true'

LOGGING_CONFIG = None  # disable default django logging configuration
LOGGING = {
    "version": 1,
    "formatters": {
        "default": {
            "format": '%(asctime)s [%(name)s] %(levelname)s: %(message)s',
            "datefmt": '%Y-%m-%d %H:%M:%S',
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG" if DEBUG_TO_CONSOLE else "INFO",
            "formatter": "default",
        },
        "file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "level": "DEBUG",
            "filename": LOG_DIR / 'debug.log',
            "when": "midnight",
            "interval": 1,
            "backupCount": 7,
            "encoding": "utf-8",
            "formatter": "default",
        },
    },
    "loggers": {
        "": {  # Default logger for any logger name
            "level": "DEBUG",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        "scrapy": {  # explicitly set scrapy logs (otherwise scrapy.statscollector not log to file)
            "level": "DEBUG",
            "handlers": ["console", "file"],
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)


# configure sentry
def setup_sentry():
    if hasattr(setup_sentry, "has_been_called"): return
    setup_sentry.has_been_called = True

    if not DEBUG:
        dsn = os.environ['SENTRY_DSN']
        sentry_sdk.init(
            dsn=dsn,
            traces_sample_rate=1.0,  # capture 100% of transactions for performance monitoring
            profiles_sample_rate=1.0,  # profile 100% of sampled transactions
            integrations=[LoggingIntegration(
                level=logging.INFO,  # Capture info and above as breadcrumbs
                event_level=logging.WARNING  # Send warnings+ as events
            )]
        )
        logging.info(f'Init Sentry')


# Initialize Logging (only once)
setup_sentry()  # should be called after Django init


logging.info(f'Init django with environment "{ENVIRONMENT}"')
logging.info(f'Database: {DATABASES["default"]["NAME"]}')
